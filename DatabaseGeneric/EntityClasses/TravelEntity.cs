//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Data.HelperClasses;
using Data.FactoryClasses;
using Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Travel'.<br/><br/></summary>
	[Serializable]
	public partial class TravelEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private LocationEntity _location;
		private UserEntity _user;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static TravelEntityStaticMetaData _staticMetaData = new TravelEntityStaticMetaData();
		private static TravelRelations _relationsFactory = new TravelRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Location</summary>
			public static readonly string Location = "Location";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class TravelEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public TravelEntityStaticMetaData()
			{
				SetEntityCoreInfo("TravelEntity", InheritanceHierarchyType.None, false, (int)Data.EntityType.TravelEntity, typeof(TravelEntity), typeof(TravelEntityFactory), false);
				AddNavigatorMetaData<TravelEntity, LocationEntity>("Location", "Travels", (a, b) => a._location = b, a => a._location, (a, b) => a.Location = b, Data.RelationClasses.StaticTravelRelations.LocationEntityUsingLocationIdStatic, ()=>new TravelRelations().LocationEntityUsingLocationId, null, new int[] { (int)TravelFieldIndex.LocationId }, null, true, (int)Data.EntityType.LocationEntity);
				AddNavigatorMetaData<TravelEntity, UserEntity>("User", "Travels", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, Data.RelationClasses.StaticTravelRelations.UserEntityUsingUserIdStatic, ()=>new TravelRelations().UserEntityUsingUserId, null, new int[] { (int)TravelFieldIndex.UserId }, null, true, (int)Data.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static TravelEntity()
		{
		}

		/// <summary> CTor</summary>
		public TravelEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public TravelEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this TravelEntity</param>
		public TravelEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Travel which data should be fetched into this Travel object</param>
		public TravelEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Travel which data should be fetched into this Travel object</param>
		/// <param name="validator">The custom validator object for this TravelEntity</param>
		public TravelEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected TravelEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Location' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLocation() { return CreateRelationInfoForNavigator("Location"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this TravelEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static TravelRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Location' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLocation { get { return _staticMetaData.GetPrefetchPathElement("Location", CommonEntityBase.CreateEntityCollection<LocationEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The DepartureDate property of the Entity Travel<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Travel"."DepartureDate".<br/>Table field type characteristics (type, precision, scale, length): Timestamp, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DepartureDate
		{
			get { return (System.DateTime)GetValue((int)TravelFieldIndex.DepartureDate, true); }
			set	{ SetValue((int)TravelFieldIndex.DepartureDate, value); }
		}

		/// <summary>The Id property of the Entity Travel<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Travel"."Id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)TravelFieldIndex.Id, true); }
			set { SetValue((int)TravelFieldIndex.Id, value); }		}

		/// <summary>The LocationId property of the Entity Travel<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Travel"."LocationId".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 LocationId
		{
			get { return (System.Int32)GetValue((int)TravelFieldIndex.LocationId, true); }
			set	{ SetValue((int)TravelFieldIndex.LocationId, value); }
		}

		/// <summary>The UserId property of the Entity Travel<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Travel"."UserId".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 UserId
		{
			get { return (System.Int32)GetValue((int)TravelFieldIndex.UserId, true); }
			set	{ SetValue((int)TravelFieldIndex.UserId, value); }
		}

		/// <summary>Gets / sets related entity of type 'LocationEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual LocationEntity Location
		{
			get { return _location; }
			set { SetSingleRelatedEntityNavigator(value, "Location"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace Data
{
	public enum TravelFieldIndex
	{
		///<summary>DepartureDate. </summary>
		DepartureDate,
		///<summary>Id. </summary>
		Id,
		///<summary>LocationId. </summary>
		LocationId,
		///<summary>UserId. </summary>
		UserId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Travel. </summary>
	public partial class TravelRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between TravelEntity and LocationEntity over the m:1 relation they have, using the relation between the fields: Travel.LocationId - Location.Id</summary>
		public virtual IEntityRelation LocationEntityUsingLocationId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Location", false, new[] { LocationFields.Id, TravelFields.LocationId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TravelEntity and UserEntity over the m:1 relation they have, using the relation between the fields: Travel.UserId - User.Id</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.Id, TravelFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticTravelRelations
	{
		internal static readonly IEntityRelation LocationEntityUsingLocationIdStatic = new TravelRelations().LocationEntityUsingLocationId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new TravelRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticTravelRelations() { }
	}
}
